/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
      listItem?: "bullet";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      title?: string;
      alt?: string;
      _type: "image";
      _key: string;
    }
  | ({
      _key: string;
    } & Code)
>;

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  description?: string;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  authors: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "author";
  }>;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    title?: string;
    alt?: string;
    _type: "image";
  };
  categories: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  introduction: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  publishedAt: string;
  body: BlockContent;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type PostIntroduction = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | BlockContent
  | Category
  | Author
  | Post
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Slug
  | PostIntroduction
  | Code;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../tekblogg-web/src/lib/sanity-client.ts
// Variable: getAllPostsCardDataQuery
// Query: *[_type == "post"] | order(publishedAt desc) {    title,    "categories": categories[]->{title, slug},    publishedAt,    "slug": slug.current,    "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),    mainImage {      "url": asset->url,      "lqip": asset->metadata.lqip,        title,        alt    }  }
export type GetAllPostsCardDataQueryResult = Array<{
  title: string;
  categories: Array<{
    title: string;
    slug: Slug;
  }>;
  publishedAt: string;
  slug: string;
  estimatedReadingTime: number;
  mainImage: {
    url: string | null;
    lqip: string | null;
    title: string | null;
    alt: string | null;
  };
}>;
// Variable: getAllSlugsQuery
// Query: *[_type == "post" && defined(slug.current)][].slug.current
export type GetAllSlugsQueryResult = Array<string>;
// Variable: getPostQuery
// Query: *[_type == "post" && slug.current == $slug][0]{    title,    "authors": authors[]->name,    "categories": categories[]->{title, slug},    publishedAt,    "slug": slug.current,    "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),    mainImage {      "url": asset->url,      "lqip": asset->metadata.lqip,        title,        alt    },    introduction,    body[]{      ...,      "url": asset->url,      "lqip": asset->metadata.lqip,    }  }
export type GetPostQueryResult = {
  title: string;
  authors: Array<string>;
  categories: Array<{
    title: string;
    slug: Slug;
  }>;
  publishedAt: string;
  slug: string;
  estimatedReadingTime: number;
  mainImage: {
    url: string | null;
    lqip: string | null;
    title: string | null;
    alt: string | null;
  };
  introduction: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  body: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
        url: null;
        lqip: null;
      }
    | {
        _key: string;
        _type: "code";
        language?: string;
        filename?: string;
        code?: string;
        highlightedLines?: Array<number>;
        url: null;
        lqip: null;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        title?: string;
        alt?: string;
        _type: "image";
        _key: string;
        url: string | null;
        lqip: string | null;
      }
  >;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '\n  *[_type == "post"] | order(publishedAt desc) {\n    title,\n    "categories": categories[]->{title, slug},\n    publishedAt,\n    "slug": slug.current,\n    "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),\n    mainImage {\n      "url": asset->url,\n      "lqip": asset->metadata.lqip,\n        title,\n        alt\n    }\n  }\n': GetAllPostsCardDataQueryResult;
    '\n  *[_type == "post" && defined(slug.current)][].slug.current\n': GetAllSlugsQueryResult;
    '\n  *[_type == "post" && slug.current == $slug][0]{\n    title,\n    "authors": authors[]->name,\n    "categories": categories[]->{title, slug},\n    publishedAt,\n    "slug": slug.current,\n    "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),\n    mainImage {\n      "url": asset->url,\n      "lqip": asset->metadata.lqip,\n        title,\n        alt\n    },\n    introduction,\n    body[]{\n      ...,\n      "url": asset->url,\n      "lqip": asset->metadata.lqip,\n    }\n  }\n': GetPostQueryResult;
  }
}
